name: CI/CD Pipeline for GCP Python Scripts

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  execute-modified-scripts:
    name: Execute Modified GCP Python Scripts
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Identify Modified Python Scripts
      id: identify_scripts
      run: |
        # Ensure the full history is available
        git fetch --unshallow || true

        # Find modified Python scripts (handle cases where no HEAD^ exists)
        MODIFIED_FILES=$(git diff --name-only ${GITHUB_BASE_REF}...${GITHUB_HEAD_REF} | grep '.py$' || echo "")

        if [ -z "$MODIFIED_FILES" ]; then
          echo "No Python scripts modified."
          echo "run_scripts=true" >> $GITHUB_ENV
        else
          echo "Modified Python scripts:"
          echo "$MODIFIED_FILES"
          echo "$MODIFIED_FILES" >> modified_scripts.txt
          echo "run_scripts=true" >> $GITHUB_ENV
        fi

    - name: Execute Modified Python Scripts
      if: env.run_scripts == 'true'
      env:
        SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_CREDENTIALS }}
      run: |
        # Save the GCP service account key
        echo "$SERVICE_ACCOUNT_KEY" > service-account-key.json

        # Set GOOGLE_APPLICATION_CREDENTIALS for GCP authentication
        export GOOGLE_APPLICATION_CREDENTIALS=service-account-key.json

        # Read the list of modified scripts and execute them
        while read -r script; do
          echo "Executing $script..."
          python "$script"
        done < modified_scripts.txt

    - name: Clean Up
      run: |
        # Remove sensitive files
        rm -f service-account-key.json modified_scripts.txt
